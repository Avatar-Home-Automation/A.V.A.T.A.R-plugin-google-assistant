{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Google Assistant for A.V.A.T.A.R!","text":"A World of Possibilities at Your Fingertips <p>Imagine being able to ask any question or control your smart home directly from A.V.A.T.A.R. With this plugin, this vision becomes a reality through the seamless integration of Google Assistant.</p> <p>Do you have a connected device without an API but integrated with Google Assistant? Want to include it in a scenario alongside other actions, like those from your smart home hub or custom-built routines? Or even define the exact phrase that triggers this scenario?</p> <p>Thanks to this plugin, A.V.A.T.A.R becomes even more versatile, blending your personalized needs with the power and flexibility of Google Assistant. Whether it's answering a simple question or interacting with a wide range of connected devices, Google Assistant is the perfect ally to enhance A.V.A.T.A.R\u2019s capabilities.</p>"},{"location":"#get-instant-answers-to-your-questions","title":"Get Instant Answers to Your Questions","text":"<p>Want to check the weather? Just say: \"What's the weather today?\" and get an immediate response.</p>"},{"location":"#control-your-smart-home","title":"Control Your Smart Home","text":"<p>Turn on the lights, adjust the thermostat, or activate your smart devices. For example: \"Start vacuuming the living room.\"</p>"},{"location":"#enjoy-entertainment-and-information","title":"Enjoy Entertainment and Information","text":"<p>Get the latest news or play interactive games like a quiz or Guess the Number. Ask A.V.A.T.A.R to tell your kids a story or crack a joke to brighten your day.</p> <p>Ready to get started? Follow the installation guide to integrate Google Assistant into A.V.A.T.A.R and unlock endless possibilities!</p>"},{"location":"OAuth-consent/","title":"4. OAuth consent","text":"<p>Nous devons maintenant rendre l'application accessible pour les utilisateurs.</p> <ol> <li> <p>In the <code>APIs and services</code> page, clic on <code>OAuth consent screen</code></p> <p></p> </li> <li> <p>In the <code>Test users</code> section, click on the <code>+ ADD USERS</code> button</p> </li> <li>In the <code>Add users</code> page, add your google email account</li> <li>Click on the <code>SAVE</code> button</li> <li> <p>Your google email account appears in the <code>Test users</code> section</p> <p></p> </li> </ol>"},{"location":"activity-related-commands/","title":"5. Activity related commands","text":"<p>Go to the Activity control page in your Google Account.</p> <ul> <li>Turn on the \"Web &amp; App activity\"</li> <li>Include Chrome history, apps and devices  </li> <li>Include voice and audio activity </li> </ul> <p></p> <p>In this way, Google Assistant can access your personal information.</p> <p>Now we need to configure the action client that will access the Google Assistant API. We'll do this in the step 5. <code>Registering a device</code>.</p>"},{"location":"commands/","title":"Actions &amp; Commands","text":""},{"location":"commands/#actions","title":"Actions","text":"<p>If you add devices connected to Google Assistant, you can easily control them through A.V.A.T.A.R. For example, you can manage a thermostat, a heater, a vacuum cleaner, light bulbs, and many other devices.</p> <p>Check the documentation for each device to discover the associated voice commands, so you can use them effectively. Then, simply tell A.V.A.T.A.R the corresponding command to interact with your device.</p>"},{"location":"commands/#commands","title":"Commands","text":"<p>Google Assistant offers a wide range of voice commands to enhance your experience. Here are some of the voice commands you can use (this list is not exhaustive):</p>"},{"location":"commands/#getting-information-measurements-and-conversions","title":"Getting information, measurements, and conversions","text":"<ul> <li>What's the weather like / What will the weather be like on [Date] / What's the weather today?</li> <li>What time is it in [city]?</li> <li>What day is it in [city]?</li> <li>Who is [person]? / What's [word, expression]? / Do you know [person, word, expression]?</li> <li>What is [information] of [place]? Example: What is the area of France?</li> <li>The standings of Ligue 1 (or the Premier League, La Liga, etc.)</li> <li>The next matches of Ligue 1 / The next match of [team], etc.</li> <li>How much is X [currency 1] in [currency 2]?</li> <li>How much is [number] [operation] [number] [operation] [number]?</li> <li>How many kilos in a tonne? / How many liters in a cubic meter?</li> <li>Translate [word, expression] to [language]</li> <li>What's the status of flight [flight name]?</li> <li>How many calories in [food]?</li> <li>What's the stock price of [company]?</li> <li>What's the exchange rate of [currency pair]? Example: Euro/dollar</li> </ul>"},{"location":"commands/#manage-your-agenda-and-create-reminders","title":"Manage your agenda and create reminders","text":"<p>(Requires Google Calendar)</p> <ul> <li>Remind me to [action] at [date/time]</li> <li>Schedule an appointment with [X] for [date] at [time]</li> </ul> <p>=&gt; This will add an appointment to your Google Calendar.</p>"},{"location":"commands/#search-for-places","title":"Search for places","text":"<ul> <li>Find me a [restaurant/cinema/hotel/station, etc.] near here</li> </ul>"},{"location":"commands/#jokes-and-stories","title":"Jokes and Stories","text":"<ul> <li>Tell me a joke</li> <li>Tell me a story</li> <li>Tell me a fable</li> <li>Penguin joke</li> <li>Sheep joke</li> <li>Best dad jokes</li> </ul>"},{"location":"commands/#dialogues","title":"Dialogues","text":"<ul> <li>How are you?</li> <li>You're very nice, etc.</li> <li>How old are you?</li> <li>What's your name? </li> </ul>"},{"location":"commands/#and-much-more-to-try-such-as","title":"And much more to try, such as:","text":"<ul> <li>I'm bored</li> <li>Motivate me</li> <li>I'm tired</li> </ul>"},{"location":"concepts/","title":"Plugin Functionality Concept","text":"<p>Before using the plugin, it\u2019s essential to understand a few fundamental concepts. Here\u2019s how the <code>google-assistant</code> plugin operates:  </p> <ol> <li>Rule Dictation: You dictate a rule to an A.V.A.T.A.R client.  </li> <li>Transmission to the Server: The rule is transmitted to the A.V.A.T.A.R server.  </li> <li>Intent Search: The server scans the installed plugins to identify an intent matching the rule.  </li> <li>Action Trigger: If an intent is found, the associated action is executed.  </li> </ol> <p>This process is standard and does not alter A.V.A.T.A.R's usual mode of operation.  </p> <p>What\u2019s new with the <code>google-assistant</code> plugin is what happens when no intent is found:  </p> <ol> <li>The rule is forwarded to the <code>google-assistant</code> plugin.  </li> <li>The plugin sends the rule to the Google Assistant API.  </li> <li>Depending on Google Assistant\u2019s capabilities, two scenarios may occur:  </li> <li>Simple Response: For example, answering a question like \"What time is it?\".  </li> <li>Interactive Conversation: If the Assistant asks a question, you can respond directly, allowing a back-and-forth exchange until the conversation ends.  </li> </ol> <p>If Google Assistant cannot provide an answer, it will notify you.  </p> <p>Here is a graphical representation of the concept behind the <code>google-assistant</code> plugin's operation:</p> <pre><code>graph LR\n    A[Dictate Rule] --&gt; B[Server]\n    B --&gt; C{Intent?}\n    C -- Yes --&gt; D[Plugin Action]\n    C -- No --&gt; E[Google-Assistant]\n    E --&gt; F[API]\n    F --&gt; G{Response?}\n    G -- Yes --&gt; H[Answer/Q&amp;A]\n    G -- No --&gt; I[No Response]</code></pre>"},{"location":"concepts/#integration-with-existing-plugins","title":"Integration with Existing Plugins","text":"<p>Keep in mind that if you have plugins that handle the same functionalities as those you might request from Google Assistant, these plugins will take priority and respond instead. However, if you want Google Assistant to handle the request, you can disable the conflicting plugins. Conversely, keep them enabled if you prefer they manage the queries.  </p>"},{"location":"copy-files/","title":"7. Grant access to Google assistant","text":"<p>The last step is to copy the access key files into the <code>google-assistant</code> plugin directory.</p> <ol> <li>Open a Windows explorer and go to the folder where all files was created in previous steps (e.g. c:\\tmp\\credentials).</li> <li>Select (and copy) the credentials.json and tokens.json files.</li> <li>Go to the A.V.A.T.A.R <code>google-assistant</code> plugin directory.</li> <li>Create a credentials directory.</li> <li> <p>Paste the credentials.json and tokens.json files into the new credentials directory:</p> <p></p> </li> <li> <p>Start (or restart) the A.V.A.T.A.R server.</p> </li> </ol>"},{"location":"create-google-project/","title":"1. Create a Google assistant project","text":"<ol> <li> <p>Open a browser internet and go to the Google Cloud Platform</p> <ul> <li>If you have a Google account or already own devices, such as a Google Home, sign in with your Google Account.  </li> </ul> Tip <p>Using the Google account that was used for a Google Home (or other devices) will allow you to control them with A.V.A.T.A.R.</p> <ul> <li>Otherwise, create a new account.</li> </ul> </li> <li> <p>On top of the window, click on the <code>Select a project</code> button</p> <p></p> </li> <li> <p>In the new window, click on the <code>NEW PROJECT</code> button</p> <p></p> </li> <li> <p>Enter a name for your project (e.g. Avatar Google Assistant)</p> <p></p> </li> <li> <p>After a few seconds, the project is created</p> <p></p> </li> <li> <p>Click on the <code>SELECT PROJECT</code> button</p> <p></p> </li> <li> <p>Make sure that the project is selected as current project and go to the step 2. \"Adding Google Assistant API\"</p> </li> </ol>"},{"location":"credentials/","title":"3. Create credentials","text":"<ol> <li>In the \"API/Service Details\" window and at the top right-hand corner, click on <code>CREATE CREDENTIALS</code></li> <li>The <code>Create credentials</code> window appears</li> <li> <p>Step 1 - <code>Credential Type</code></p> <ul> <li>Select <code>User data</code></li> <li>Click on <code>NEXT</code> button</li> </ul> <p></p> </li> <li> <p>Step 2 - <code>OAuth Consent Screen</code></p> <ul> <li>Enter an App name (e.g. Avatar Google Assistant)</li> <li>Select your Email adress as <code>User support email</code></li> <li>Enter your Email adress as <code>Developer email</code></li> <li>Click on <code>SAVE AND CONTINUE</code> button</li> </ul> <p></p> </li> <li> <p>Step 3 - <code>Scopes</code></p> <ul> <li>This step is optional, click on <code>SAVE AND CONTINUE</code> button</li> </ul> </li> <li> <p>Step 4 - <code>OAuth Client ID</code></p> <ul> <li>In the Application type, select <code>Desktop app</code></li> <li>Enter a name (e.g. Avatar Google Assistant)</li> <li>Click on <code>CREATE</code> button</li> </ul> <p></p> </li> <li> <p>Step 5 - <code>Your credentials</code></p> <ul> <li> <p>Download your credentials by the <code>DOWNLOAD</code> button.</p> <p></p> </li> <li> <p>Create a directory where you want (e.g c:/tmp/credentials)</p> </li> <li> <p>Copy the credentials file to this directory and rename it to credentials.json</p> <p></p> </li> <li> <p>Click on <code>DONE</code> button</p> </li> </ul> </li> <li> <p>The \"OAuth 2.0 Client IDs\" is created, you can see it to the <code>Credentials</code> page</p> <p></p> Tip <p>If you want, you can also download the <code>Credentials</code> file on this page.</p> </li> </ol>"},{"location":"development/","title":"Development","text":"<p>It is possible to trigger a Google Assistant action from another plugin using a trigger, which can be useful in several situations, such as:</p> <ul> <li>Controlling voice commands: If you want to have full control over the voice commands that trigger Google Assistant, or if you prefer not to use Assistant's voice responses to give your own answers.</li> <li>Managing multiple actions: If you have multiple actions to execute, one of which involves a device controlled by Google Assistant, while the others require specific actions not related to Google Assistant.</li> </ul> <p>You can use the <code>trigger</code> function of Avatar to execute a Google Assistant action from another plugin. This function allows sending a voice command to Google Assistant and receiving a response if necessary.</p> <p>Syntax:</p> <pre><code>Avatar.trigger(ListenerName, Object)\n</code></pre> <p>Parameters:</p> <ul> <li>ListenerName : Always 'GoogleAssistant'</li> <li>Object: An object containing the following parameters:<ul> <li>client (Required): The name of the client sending the command.</li> <li>sentence (Required): The natural language sentence sent to Google Assistant. Use data.rawSentence to retrieve the sentence in natural language. </li> <li>audio (Optional): Allows or disallows Google Assistant to vocalize its responses. The default value is true (vocalizes). Set to false if you do not want a vocal response.</li> <li>callback (Optional): A function to execute after the command has been processed by Google Assistant. This function takes two parameters:<ul> <li>text: null if there is no response or an error message defined in the Config.modules['google-assistant'].noResponse parameter if the assistant doesn't respond.</li> <li>continueConversation: Indicates whether the conversation should continue. Set to false if it's not a question/answer game, or true if it is.\u00e7</li> </ul> </li> </ul> </li> </ul> <p>Example call in a plugin:</p> <pre><code>Avatar.speak(\"I'll take care of it\", data.client, false, () =&gt; {\n    Avatar.trigger('GoogleAssistant', {\n        client: data.client,\n        sentence: data.rawSentence,\n        audio: false,\n        callback: function(err, continueConversation) {\n            // Ends the conversation\n            Avatar.Speech.end(data.client);\n\n            if (err) {\n                // error, do stuff\n                return;\n            }\n\n            // Do stuff\n        }\n    });\n});\n</code></pre> <p>In this example, a text is vocalized by A.V.A.T.A.R, then the command is sent to Google Assistant, and the voice response is disabled with the audio: false option. The callback function is then called to handle the end of the conversation or execute other actions.</p>"},{"location":"google-assistant-API/","title":"2. Add Google assistant API","text":"<ol> <li>Do a right click on this link and in the menu click on <code>Open link in a new tab</code> to open a new window.</li> <li> <p>A new window opens with the Google Assistant API librairy</p> <p></p> </li> <li> <p>Click on the <code>ENABLE</code> button</p> </li> <li> <p>The dashboard of the Google Assistant API appears</p> <p></p> </li> <li> <p>Go to the step 3. \"Creating Credentials\"</p> </li> </ol>"},{"location":"installation-test/","title":"Installation test","text":"<p>Dictate a simple rule, for example, to know the time (first verify if a <code>time</code> plugin is already present in A.V.A.T.A.R, if so, disable it first otherwise the plugin will answer you.)</p> <p>Do not forget the trigger keyword (e.g. <code>sarah</code> or <code>jarvis</code>)!</p> <p>What time is it ?   </p> <p>What time is it in Bangkok?</p> <p>What day is it in Bangkok?</p> Info <p>If A.V.A.T.A.R does not respond, make sure you have followed all the steps for creating the access keys and, if necessary, redo the missed steps. As a last resort, you can delete the project and redo it by strictly following the installation documentation. If you still encounter issues, post a message on the forum.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>Creating Your Access Key for the Google Assistant API - 7 Simple Steps in 30 Minutes</p> <p>Welcome to this exciting journey of connecting with Google Assistant! Don\u2019t worry, it\u2019s not as complicated as it sounds, and you\u2019ll have it all done in just 30 minutes. We\u2019ll walk through 7 easy steps to create the access key needed for the Google Assistant API. By following these steps in order, you'll be ready to get A.V.A.T.A.R talking to Google Assistant in no time!</p> <p>No need to be an expert in programming. It\u2019s more like putting together the pieces of a puzzle: each step is a small move, but together, they\u2019ll get you to the final result. Let\u2019s get started!</p>"},{"location":"properties/","title":"Properties","text":""},{"location":"properties/#configuration-properties","title":"Configuration Properties","text":"<p>The properties below allow you to customize the plugin's behavior. These properties are located in the google-assistant.prop file and can be accessed directly from <code>Plugin Studio</code>.</p>"},{"location":"properties/#note-on-lang","title":"Note on <code>{LANG}</code>","text":"<p><code>{LANG}</code> is a placeholder that must be replaced by the corresponding language code for the current language in use (e.g., <code>fr-FR</code> for French, <code>en-EN</code> for English, etc.). This ensures the plugin's settings are adapted to the supported languages.</p> Parameter Type DefaultValue Description <code>authorization/</code><code>credentials</code> string credentials.json OAuth client of the Google Assistant project <code>authorization/</code><code>tokens</code> string tokens.json Access key for the device registered with the OAuth client <code>formatSentence/</code><code>{LANG}/</code><code>exec</code> boolean true Determines whether the <code>formatSentence/{LANG}/replace</code> property is verified or ignored. <code>formatSentence/</code><code>{LANG}/</code><code>replace</code> array of arrays of string[[\"to replace\",\"replaced by\"]] Corrects user-dictated sentences so that they are properly interpreted by Google Assistant.For example, suppose the user vocalizes the command \"\u00e9cho perroquet\"The corresponding Google Assistant action is \"Echo Perroquet\".By adding the [\"\u00e9cho perroquet\", \"Echo Perroquet\"] array to this property, the command will automatically be transformed into \"Echo Perroquet\", enabling Google Assistant to match the action. <code>waitForAnswer</code> integer 15 Waiting time in seconds for the user's response during a conversation with the Assistant. <code>noResponse/{LANG}</code> string Phrase spoken by A.V.A.T.A.R if the Assistant's response is empty. You can include multiple phrases separated by pipes (<code>|</code>). <code>askmeResponse/{LANG}</code> object Possible responses during a question/answer dialogue with the Assistant. <code>noAskmeResponse/{LANG}</code> string Phrase spoken by A.V.A.T.A.R when the expected user response exceeds the specified timeout (<code>waitForAnswer</code>). <code>speechPlugin</code> string sonosPlayer Plugin used to override the <code>speak()</code> and <code>play()</code> functions if the sound is redirected to Wi-Fi speakers."},{"location":"register-device/","title":"6. Register a device","text":"<p>A.V.A.T.A.R does not require the Python SDK to use Google Assistant. You can therefore install the Python SDK on a different machine than the one where A.V.A.T.A.R is installed, for example, a development machine.</p> <p>However, the SDK is essential for installation and is only used to:</p> <ul> <li>Register a Device</li> <li>Retrieve an access key for the Actions client</li> </ul>"},{"location":"register-device/#install-python","title":"Install Python","text":"<p>First, install Python 3 on your machine.</p> Warning <p>Click the checkbox 'Add Python to environment variables' to run Python from any directory; otherwise, you will need to execute commands from its installation directory.</p> <ol> <li>Check if Python is correctly installed by opening a DOS terminal.</li> <li> <p>Enter the following command </p> <pre><code>python --version\n</code></pre> <p></p> Warning <p>If you have an error message, it means that Python is not in the environment variables. Resolve the problem by adding Python to the environement variables or reinstall it (do not forget to select 'Add Python to environment variables')</p> </li> </ol>"},{"location":"register-device/#install-google-auth-librairies","title":"Install google-auth librairies","text":"<p>In the DOS terminal, enter the following command to install the google-auth librairies</p> <pre><code>pip install google-auth google-auth-oauthlib google-auth-httplib2\n</code></pre> <p></p>"},{"location":"register-device/#obtain-credentials","title":"Obtain credentials","text":"<ol> <li> <p>Obtain credentials to be able to create a new device model.      Reference the credentials.json file you copied in the previous step 3. <code>Creating Credentials</code>.</p> <p><pre><code>cd /tmp/credentials\n</code></pre> <pre><code>google-oauthlib-tool --client-secrets C:\\tmp\\credentials\\credentials.json --scope https://www.googleapis.com/auth/assistant-sdk-prototype\n</code></pre></p> </li> <li> <p>Because the projet created in the step 1 is in testing mode, the following warning message appears</p> <ul> <li>Clic the <code>Continue</code> button</li> </ul> <p></p> </li> <li> <p>A new page appears to grant your project access to your Google account.</p> <ul> <li>Clic the <code>Continue</code> button</li> </ul> <p></p> </li> <li> <p>A new page appears with the authentication flow comleted.</p> <ul> <li>You can close the window</li> </ul> <p></p> </li> <li> <p>If authorization was successful, you will see in the DOS terminal a JSON response similar to the following:</p> <p></p> </li> <li> <p>Keep this DOS terminal opened, we need to copy the \"token\" key in the JSON response to create the device model (see next chapter).</p> </li> </ol>"},{"location":"register-device/#device-model","title":"Device model","text":"<p>To create a device model, you need two things:</p> <ul> <li> <p>The ID of the project (\"&lt;PROJECT ID&gt;\") created in the step 1. <code>Creating a project</code>:</p> <ul> <li> <p>To find the project ID, display the project dashboard in Google Cloud Platform</p> <p></p> </li> </ul> </li> <li> <p>The access token (\"&lt;ACCESS TOKEN&gt;\") created in the <code>Obtaining credentials</code> section (just below):</p> <ul> <li> <p>In the DOS terminal, keep the <code>token</code> key in the JSON response of the credentials obtained just below (not including the double quotes).</p> <p></p> </li> </ul> </li> </ul>"},{"location":"register-device/#create-a-device-model-file","title":"Create a device model file","text":"<ol> <li> <p>Open your prefered editor and enter the following lines in a new file:</p> <pre><code>{\n\"project_id\": \"&lt;PROJECT ID&gt;\",\n\"device_model_id\": \"&lt;PROJECT NAME&gt;-light-v1\",\n\"manifest\": {\n    \"manufacturer\": \"&lt;PROJECT NAME&gt; devices\",\n    \"product_name\": \"&lt;PROJECT NAME&gt; light device\"\n},\n\"device_type\": \"action.devices.types.LIGHT\",\n\"traits\": [\"action.devices.traits.OnOff\"]\n}\n</code></pre> </li> <li> <p><code>project_id</code> key: Replace &lt;PROJECT ID&gt; by the ID of the project</p> </li> <li><code>device_model_id</code> key: Replace &lt;PROJECT NAME&gt; by the name of the project<ul> <li>IMPORTANT: Replace the spaces with dashes (-).</li> </ul> </li> <li><code>manufacturer</code> and <code>product_name</code> key: Replace &lt;PROJECT NAME&gt; by the name of the project</li> <li> <p>Save the file as <code>device-model.json</code></p> <ul> <li>In the same directory where the credentials.json is located (e.g. c:\\tmp\\credentials)</li> </ul> </li> </ol>"},{"location":"register-device/#create-the-device-model","title":"Create the device model","text":"<p>In the DOS terminal, enter the following command:</p> <ul> <li>Replace &lt;ACCESS TOKEN&gt; by your access token (not including the double quotes) created in the <code>Obtaining credentials</code> section (see below).</li> <li>Replace &lt;PROJECT ID&gt; by the ID of the project</li> </ul> <pre><code>curl -s -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer &lt;ACCESS TOKEN&gt;\" -d @C:\\tmp\\credentials\\device-model.json https://embeddedassistant.googleapis.com/v1alpha2/projects/&lt;PROJECT ID&gt;/deviceModels/\n</code></pre> <p>You must see the result of the creation of the device model:</p> <p></p> Error message <p>If you see an error message:</p> <ol> <li>Check the project ID and the the access token in the command.</li> <li>Check the <code>device-model.json</code> file.</li> </ol>"},{"location":"register-device/#device-model-instance","title":"Device model instance","text":""},{"location":"register-device/#create-a-device-instance-file","title":"Create a device instance file","text":"<ol> <li> <p>Open your prefered editor and enter the following lines in a new file:</p> <pre><code>{\n    \"id\": \"device_avatar\",\n    \"model_id\": \"&lt;PROJECT NAME&gt;-light-v1\",\n    \"nickname\": \"My Avatar Device\",\n    \"client_type\": \"SDK_SERVICE\"\n}\n</code></pre> </li> <li> <p>Replace &lt;PROJECT NAME&gt; by the name of the project</p> <ul> <li>IMPORTANT: Replace the spaces with dashes (-).</li> </ul> </li> <li> <p>Save the file as <code>device-instance.json</code></p> <ul> <li>In the same directory where the credentials.json is located (e.g. c:\\tmp\\credentials)</li> </ul> </li> </ol>"},{"location":"register-device/#create-the-device-instance","title":"Create the device instance","text":"<p>In the DOS terminal, enter the following command:</p> <ul> <li>Replace &lt;ACCESS TOKEN&gt; by your access token (not including the double quotes) created in the <code>Obtaining credentials</code> section (see below).</li> <li>Replace &lt;PROJECT ID&gt; by the ID of the project</li> </ul> <pre><code>curl -s -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer &lt;ACCESS TOKEN&gt;\" -d @C:\\tmp\\credentials\\device-instance.json https://embeddedassistant.googleapis.com/v1alpha2/projects/&lt;PROJECT ID&gt;/devices/\n</code></pre> <p>You must see the result of the creation of the device instance:</p> <p></p> Error message <p>If you see an error message:</p> <ol> <li>Check the project ID and the access token in the command.</li> <li>Check the <code>device-instance.json</code> file.</li> </ol>"},{"location":"register-device/#create-an-access-token-for-the-device","title":"Create an access token for the device","text":"<p>In the DOS terminal, enter the following command:</p> <pre><code>google-oauthlib-tool --client-secrets C:\\tmp\\credentials\\credentials.json --scope https://www.googleapis.com/auth/assistant-sdk-prototype --save\n</code></pre> <ol> <li> <p>Because the projet created in the step 1 is in testing mode, the following warning message appears</p> <ul> <li>Clic the <code>Continue</code> button</li> </ul> <p></p> </li> <li> <p>A new page appears to grant your project access to your Google account.</p> <ul> <li>Clic the <code>Continue</code> button</li> </ul> <p></p> </li> <li> <p>A new page appears with the authentication flow comleted.</p> <ul> <li>You can close the window</li> </ul> <p></p> </li> <li> <p>Return to the DOS terminal to see where the credentials.json file was saved</p> <p></p> </li> <li> <p>Open a Windows explorer and go to the folder </p> </li> <li>Rename the credentials.json to tokens.json</li> <li>Copy the tokens.json file to the directory where the credentials.json is located. (e.g. c:\\tmp\\credentials)</li> </ol>"},{"location":"supported-languages/","title":"Supported Languages","text":"<p>Google Assistant supports a range of languages, making it a versatile tool for users worldwide. Below are the languages currently supported by Google Assistant.</p>"},{"location":"supported-languages/#language-availability","title":"Language Availability","text":"<ul> <li>Ensure that the sentences and responses are localized in the properties of the plugin to match the selected language.</li> </ul> <p>Note: </p> <ul> <li>If the language configured in the A.V.A.T.A.R client is not supported by Google Assistant, an error message will be displayed in the A.V.A.T.A.R Server console.</li> <li>Similarly, if the plugin properties are not configured for the current language, A.V.A.T.A.R will also display an error message to indicate the missing configuration.</li> </ul> <p>Google Assistant's language support includes the following:</p>"},{"location":"supported-languages/#commonly-supported-languages","title":"Commonly Supported Languages","text":"Language Code Example Regions English <code>en-EN</code> United States, United Kingdom, Australia, Canada French <code>fr-FR</code> France, Canada, Belgium Spanish <code>es-ES</code> Spain, Mexico, Argentina German <code>de-DE</code> Germany, Austria, Switzerland Italian <code>it-IT</code> Italy Japanese <code>ja-JP</code> Japan Portuguese <code>pt-PT</code> Brazil, Portugal Dutch <code>nl-NL</code> Netherlands, Belgium Chinese <code>zh-CN</code> Mainland China (Mandarin), Taiwan (Traditional Chinese) Russian <code>ru-RU</code> Russia"},{"location":"supported-languages/#additional-supported-languages","title":"Additional Supported Languages","text":"Language Code Example Regions Korean <code>ko-KR</code> South Korea Hindi <code>hi-IN</code> India Arabic <code>ar-SA</code> Middle East, North Africa Swedish <code>sv-SE</code> Sweden Norwegian <code>no-NO</code> Norway Danish <code>da-DK</code> Denmark Finnish <code>fi-FI</code> Finland Polish <code>pl-PL</code> Poland Turkish <code>tr-TR</code> Turkey"}]}